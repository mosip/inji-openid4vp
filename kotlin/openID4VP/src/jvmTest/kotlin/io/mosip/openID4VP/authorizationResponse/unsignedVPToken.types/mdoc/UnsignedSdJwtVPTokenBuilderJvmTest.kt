package io.mosip.openID4VP.authorizationResponse.unsignedVPToken.types.sdJwt

import io.mockk.unmockkAll
import java.util.Base64
import kotlin.test.AfterTest
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class UnsignedSdJwtVPTokenBuilderJvmTest {

    private val clientId = "test-client"
    private val nonce = "test-nonce"

    // private val sdJwt1 = "eyJ0eXAiOiJ2YytzZC1qd3QiLCJhbGciOiJFUzI1NiIsIng1YyI6WyJNSUlCNVRDQ0FZdWdBd0lCQWdJUUdVZEYwa0JpUUdEYXdwKzBkQlNTNWpBS0JnZ3Foa2pPUFFRREFqQWRNUTR3REFZRFZRUURFd1ZCYm1sdGJ6RUxNQWtHQTFVRUJoTUNUa3d3SGhjTk1qVXdOREV5TVRReU16TXdXaGNOTWpZd05UQXlNVFF5TXpNd1dqQWhNUkl3RUFZRFZRUURFd2xqY21Wa2J5QmtZM014Q3pBSkJnTlZCQVlUQWs1TU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUZYVk5BMGxhYSs1UDJuazVQSkZvdjh4aEJGTno1VU9KQklWc3lrMFNLU2ZxVGZLTUI2UitjRkROaWpkbUJZeXVFYVVnTWd1VWM4aE9Wbm5yZVc5dGhLT0JxRENCcFRBZEJnTlZIUTRFRmdRVVlSOHZGUVRsa2pmMS9ObktlWnh2WTBaejNhQXdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1CVUdBMVVkSlFFQi93UUxNQWtHQnlpQmpGMEZBUUl3SHdZRFZSMGpCQmd3Rm9BVUw5OHdhTll2OVFueElIYjVDRmd4anZaVXRVc3dJUVlEVlIwU0JCb3dHSVlXYUhSMGNITTZMeTltZFc1clpTNWhibWx0Ynk1cFpEQVpCZ05WSFJFRUVqQVFnZzVtZFc1clpTNWhibWx0Ynk1cFpEQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpQkJ3ZFMvY0ZCczNhd3RmUDlHRlZrZ1NPSVRRZFBCTUxoc0pCeWpnN2wyTFFJaEFQUUpXeTdxUXNmcTJHcmRwY0dYSHJEVkswdy9YblBGMlhBVDZyVFg4dUNQIiwiTUlJQnp6Q0NBWFdnQXdJQkFnSVFWd0FGb2xXUWltOTRnbXlDaWMzYkNUQUtCZ2dxaGtqT1BRUURBakFkTVE0d0RBWURWUVFERXdWQmJtbHRiekVMTUFrR0ExVUVCaE1DVGt3d0hoY05NalF3TlRBeU1UUXlNek13V2hjTk1qZ3dOVEF5TVRReU16TXdXakFkTVE0d0RBWURWUVFERXdWQmJtbHRiekVMTUFrR0ExVUVCaE1DVGt3d1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRQy9ZeUJwY1JRWDhaWHBIZnJhMVROZFNiUzdxemdIWUhKM21zYklyOFRKTFBOWkk4VWw4ekpsRmRRVklWbHM1KzVDbENiTitKOUZVdmhQR3M0QXpBK280R1dNSUdUTUIwR0ExVWREZ1FXQkJRdjN6Qm8xaS8xQ2ZFZ2R2a0lXREdPOWxTMVN6QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0lRWURWUjBTQkJvd0dJWVdhSFIwY0hNNkx5OW1kVzVyWlM1aGJtbHRieTVwWkRBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1Dc0dBMVVkSHdRa01DSXdJS0Flb0J5R0dtaDBkSEJ6T2k4dlpuVnVhMlV1WVc1cGJXOHVhV1F2WTNKc01Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRQ1RnODBBbXFWSEpMYVp0MnV1aEF0UHFLSVhhZlAyZ2h0ZDlPQ21kRDUxWndJZ0t2VmtyZ1RZbHhTUkFibUtZNk1sa0g4bU0zU05jbkVKazlmR1Z3SkcrKzA9Il19.eyJjcmVkZW50aWFsX3R5cGUiOiJNU0lTRE4iLCJuYmYiOjE3NTI5ODQ3MzcsImV4cCI6MTc4NTM4NDczNywidmN0IjoiZXUuZXVyb3BhLmVjLmV1ZGkubXNpc2RuLjEiLCJjbmYiOnsia2lkIjoiZGlkOmp3azpleUpyZEhraU9pSkZReUlzSW1OeWRpSTZJbEF0TWpVMklpd2llQ0k2SWxKUk5XSkRiMngzUkZKV1pHUjRhbkk1TFUweUxVNUtPRVZ1TjFwSE1tTXpVbkZzVTJKVVR6TlJUMFVpTENKNUlqb2lZVlpFVVZkak5TMUJZbmhIYmxoV2JYRk1WMkphWmpGR1ZsWjFOVEF5TW0xaGFHdHpSVTh3VTJSZmR5SXNJblZ6WlNJNkluTnBaeUo5IzAifSwiaXNzIjoiaHR0cHM6Ly9mdW5rZS5hbmltby5pZCIsImlhdCI6MTc1Mzk0MjUyNywiX3NkIjpbIjI5SXE0b29UNzhGMkI1bFI1RzhGSGhGWWJKWmlER29vRHEySUpicFpCVG8iLCIzZVNTOEtZcUZzQVVHZVhIVWhwU21qd1k2TG5XaVJCMTVXYXRLY0ZTNzhJIiwiNE9mZGdDalZPUTJMbzhESXpTUEpodVVWT25yWGhjX1dkTGpCZDcwRGJFUSIsIkFwMWVweTdtVThiRkdrNXZkWXdlMjZma2pUY2taaW1uMDlncFlSR25XY3ciLCJEU0NWZHY3WklSOEZNNTR4c05MVlZqYndJc0JjcE9EUllHRTlCOTFra19RIiwiRnMwbGVHT0VMUU85ejhYblZsbVJTdXRUX0d3dDRTOWNubUJLcDF4TnRyQSIsIlFTbjl3dUx3LUJKY3VLRF9URHl0NGcyZlR4LU1KcmNyVzM0bVpKdHhtc0kiLCJfZDkyZVNKcW9FemdhQlctcFU2NUY2N3FOUno2Y2owRkJObDJYcTFmRWdFIiwia3VwOXhVUjZYMDZ5X3RiVVBPTzJ4VWxiWHJReG1qalRiVE9zMktYUUM4YyIsInBIYmh1eWxJbkZnaGtPY3hqcHVKb0o0S0hITUhfT2JSOWxYX0ZUa2Vmb2ciLCJ4YW1wZmJkRHJfd05LUllKN1F6NlAxZEZJcGJvMTJFdHRfZkMzYko4MDFvIl0sIl9zZF9hbGciOiJzaGEtMjU2In0.pf3MHMEAma64_-8mfmPdLCNzgzz5K0_EianTPd5IUzMlkXhB1v4NtQmRiARlLvTd9kkUChhW4lascAkW8TOnSA~WyI4NzY3MzA2NTE3OTE1MTMzMTI2NDI5MTUiLCJwaG9uZV9udW1iZXIiLCI0OTE1MTEyMzQ1NjciXQ~WyIyNzgzODk0ODU5Mjc2ODY0NTY1NjkxNzUiLCJyZWdpc3RlcmVkX2ZhbWlseV9uYW1lIiwiTXVzdGVybWFuIl0~WyI5Njk4OTYzODY5MDAwMTE3MzM0MTE0NDQiLCJyZWdpc3RlcmVkX2dpdmVuX25hbWUiLCJKb2huIE1pY2hhZWwiXQ~WyIxMDE3NzAzNzY5OTU2Mzc0MjI4NTIwMDQ4IiwiY29udHJhY3Rfb3duZXIiLHRydWVd~WyIxMTcwMTg2ODQ0MTkyNTczMzQyOTYyNDg5IiwiZW5kX3VzZXIiLGZhbHNlXQ~WyI0MzI1MjkxNDE2MzczOTU0MzgxNDM5NTUiLCJtb2JpbGVfb3BlcmF0b3IiLCJUZWxla29tX0RFIl0~WyI2ODA1NjkyNDQ3MTA1NjQ3ODc1ODQxNzUiLCJpc3N1aW5nX29yZ2FuaXphdGlvbiIsIlRlbE9yZyJd~WyI5MzE5ODU3NzkxNTk0Njc0ODE2NTg4ODciLCJ2ZXJpZmljYXRpb25fZGF0ZSIsIjIwMjMtMDgtMjUiXQ~WyI2MTkxMTk5NjI3Mzg2MDQ5MjI4ODkwMjEiLCJ2ZXJpZmljYXRpb25fbWV0aG9kX2luZm9ybWF0aW9uIiwiTnVtYmVyVmVyaWZ5Il0~WyIzNzM2NzUzNDQwNDA1ODI4Mzc2MTE0MjQiLCJpc3N1YW5jZV9kYXRlIiwiMjAyNS0wNy0yMFQwNDoxMjoxNy4wODlaIl0~WyI1NjU0NDMyNzk2MjEwMjQ2ODk0NjQ3MDgiLCJleHBpcnlfZGF0ZSIsIjIwMjYtMDctMzBUMDQ6MTI6MTcuMDg5WiJd~"
    private val sdJwt2 =
        "eyJ4NXQjUzI1NiI6IjVlN3dXZGdicTZZQWNoT2l5VnBQbF9zRVBwc2Jtb2ZaMkVIbHJLN1pnQ0EiLCJ4NWMiOlsiTUlJQzJqQ0NBY0tnQXdJQkFnSUlDazg1UDVPa1RUOHdEUVlKS29aSWh2Y05BUUVMQlFBd2dZc3hDekFKQmdOVkJBWVRBa2xPTVFzd0NRWURWUVFJREFKTFFURVNNQkFHQTFVRUJ3d0pRa0ZPUjBGTVQxSkZNUTR3REFZRFZRUUtEQVZKU1VsVVFqRVhNQlVHQTFVRUN3d09SVmhCVFZCTVJTMURSVTVVUlZJeE1qQXdCZ05WQkFNTUtYZDNkeTVsZUdGdGNHeGxMbU52YlNBb1EwVlNWRWxHV1Y5V1ExOVRTVWRPWDBWRU1qVTFNVGtwTUI0WERUSTFNRE13TnpBMk5UQTFOVm9YRFRJNE1ETXdOakEyTlRBMU5Wb3dnWVl4Q3pBSkJnTlZCQVlUQWtsT01Rc3dDUVlEVlFRSURBSkxRVEVTTUJBR0ExVUVCd3dKUWtGT1IwRk1UMUpGTVE0d0RBWURWUVFLREFWSlNVbFVRakVYTUJVR0ExVUVDd3dPUlZoQlRWQk1SUzFEUlU1VVJWSXhMVEFyQmdOVkJBTU1KRU5GVWxSSlJsbGZWa05mVTBsSFRsOUZSREkxTlRFNUxVVkVNalUxTVRsZlUwbEhUakFxTUFVR0F5dGxjQU1oQVBuVTNianU5MGkxSlBScmE4eURHRGVWR0M5SGl0NkY4dEh6L1FIM0JpMWFvejh3UFRBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlFlZ3krZCtoMWdhOTZFVGN1amtrYVF5SzNjeWpBT0JnTlZIUThCQWY4RUJBTUNCU0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUNwUGFrSjI5TlBrQXJKNy9id3l3NmVRa1RsQ09oWktucEpIY0dBbXBBblRaME96Q1RMNE5vNml5dFBONTRQLzdNdEIydUEwRVJ1bjhVc0UyZ3pBZEZPQWRUYXpNNnFjd1VNMzI1VmkzNkxOZGdlSlRiRTdaTm9LbEc5SDNEMlE4REg5SFEreVN2cUtId2VZY0RLdk9yRkMxWENva01JNTUvNUdPZXNGeXJYWTBQRDFuUnlubWtxbE95eVBUMUxqMzVEeFE1c3Y3a0dKS21oRzNoS2t1R2xFcFVYWkhham5qM0tFSjlLZm9ZOW83cVBGVUFJZGw2cDU1YmV6b2VPUzFGUDRCQlZvRllUZWNWR3B0SEk2Q1phUWthRHBzTjRmMCtrZjlTa2RpeW4yMkFQWkU2Z3dvTnQvSzVudEhDTmUxdUVGNlNRN1gxYlhRdk5HSDRadmdVTT0iLCJNSUlEeXpDQ0FyT2dBd0lCQWdJSXp0aFBrU3hmRXlrd0RRWUpLb1pJaHZjTkFRRUxCUUF3ZURFTE1Ba0dBMVVFQmhNQ1NVNHhDekFKQmdOVkJBZ01Ba3RCTVJJd0VBWURWUVFIREFsQ1FVNUhRVXhQVWtVeERqQU1CZ05WQkFvTUJVbEpTVlJDTVJjd0ZRWURWUVFMREE1RldFRk5VRXhGTFVORlRsUkZVakVmTUIwR0ExVUVBd3dXZDNkM0xtVjRZVzF3YkdVdVkyOXRJQ2hTVDA5VUtUQWVGdzB5TlRBek1EY3dOalV3TlRKYUZ3MHlPREF6TURZd05qVXdOVEphTUlHTE1Rc3dDUVlEVlFRR0V3SkpUakVMTUFrR0ExVUVDQXdDUzBFeEVqQVFCZ05WQkFjTUNVSkJUa2RCVEU5U1JURU9NQXdHQTFVRUNnd0ZTVWxKVkVJeEZ6QVZCZ05WQkFzTURrVllRVTFRVEVVdFEwVk9WRVZTTVRJd01BWURWUVFERENsM2QzY3VaWGhoYlhCc1pTNWpiMjBnS0VORlVsUkpSbGxmVmtOZlUwbEhUbDlGUkRJMU5URTVLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFQUWV4aCsyZTBTSWRyN3IyUnNaS3dybEFGNTQ0cUZuMmQ2TVplQS9CbEtxZUtRVVZmZ0tEMjQ1S0lYWU1MYi9yMGNJY1hjOXYvdUlDR1VZbXozN3MzQTdJWEV2QllYSkd5dWlPRXI5dnZZeVl2U3N5a2IxRnlma3B3cXpyQytjbkZGcWU4UW1nOFI2WjVTSTAyWEh4NEliMGJzYVJDOHE4dER1TUtranQ0TjZ6enQ0Z053c083SjBEMDVqa3FqcG9tUytIdUVPQ01UMGlFMzRVd3lhWitXZW8rSE1yRktkREFISWhoL25FNnROUGMxaHBPaFYxK25obGFDR1RnWnhPNW51RkpqQWRjY2xsd2E2WEpKT1kreSswdUsxSFIvVEJ1QlB6T1RYWFgvTnBqSVhkSHZrTUxYTWFsRW92dXovWWxuVXE1WE15N2pOTUpJYlpwUVZwMGNDQXdFQUFhTkZNRU13RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVTZTYlJYNnRCWDVnMjg0T3hSSjJ3UXM1QVNLa3dEZ1lEVlIwUEFRSC9CQVFEQWdLRU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQkVraE9tODJkbVUxYUFDSXF4UElhUk96d0hGT3l6ZWowa3U2K0Zmb0FhdG9hR0t5QytXc2srcU8rSkdwblA3a04wdGh2bThjc0VvQTg4dW5ON21CMzVTSFJHOTVYOWZJYmZTZktta3RVbW0xcFJxN2xvMTdPZ3NYNWRYeEVDM05YMStYNjZBWTU4enhjcDgwMk1YOG92THM2YTRDcmhMd01oTUxNemJLWVRLVmp0MWxweDdhUlpzeFc4Zjkva0paL3MyOHBZUitpMUJYUXpWYWh1T0hzL2VLVmlqR1NkNFhmSXJ2cjdIUHNjUUE1VDgvU1M3VUhDWjY0Qjc5RENwZGozQkpNWmdpVVJiUzZEK0tYUm56SmR6UitzVVpRbmZDNm1wbE1IVzBRZURYOWpBa3A5MVdscHlYcFR1bWo2SFRYdUltVGF2aVQ1SUVEb2RudmlSa2hCIiwiTUlJRHR6Q0NBcCtnQXdJQkFnSUlDVFJEM1NPbUY2UXdEUVlKS29aSWh2Y05BUUVMQlFBd2VERUxNQWtHQTFVRUJoTUNTVTR4Q3pBSkJnTlZCQWdNQWt0Qk1SSXdFQVlEVlFRSERBbENRVTVIUVV4UFVrVXhEakFNQmdOVkJBb01CVWxKU1ZSQ01SY3dGUVlEVlFRTERBNUZXRUZOVUV4RkxVTkZUbFJGVWpFZk1CMEdBMVVFQXd3V2QzZDNMbVY0WVcxd2JHVXVZMjl0SUNoU1QwOVVLVEFlRncweU5ERXhNVGd3TkRJMU1UVmFGdzB6TWpFeE1UWXdOREkxTVRWYU1IZ3hDekFKQmdOVkJBWVRBa2xPTVFzd0NRWURWUVFJREFKTFFURVNNQkFHQTFVRUJ3d0pRa0ZPUjBGTVQxSkZNUTR3REFZRFZRUUtEQVZKU1VsVVFqRVhNQlVHQTFVRUN3d09SVmhCVFZCTVJTMURSVTVVUlZJeEh6QWRCZ05WQkFNTUZuZDNkeTVsZUdGdGNHeGxMbU52YlNBb1VrOVBWQ2t3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREhidDM1QTAyV1ZuMlJaNkRBekF3MDAyZ1Z5ajRGZWlHT2VMdFdhL3I0VERiTVpZMFlKNGJlUmhLcjNOWnJibm54SDhsSFJmUThaTkhHNVRxT1lyTzk3MjR2VU9QTlVNd293YmhpdzRKTU84U0JuK0JxNlpuRDBHYWN4SGMyRGJmakI4NFRzTU1UNkRIc0t2cmI0Z0pXMEVnMHRUMUdQZzc4NnN3NUtkNk1xYlZYQTNpOWM0WXgyU0s2TUh5U2FHcVRkazBCeWNvVi9VRVdCYXFwK0RuQ01IQlhCd2gySDRQYTlXR3JRSW1sRTZ5VjQ2R0g5bEFyYkVCVW9reWFyVjBHQmpuVHQ5YVZpak9YaVJ0QUE3bEwzR00zZVRBQ0dDUXJlME9kZDlKVUV5b2Iycmt4OU95TmFGK0dDL1l5Y0xBMDA4bU0zWFE1aTdKU093cVBrREpUQWdNQkFBR2pSVEJETUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFJd0hRWURWUjBPQkJZRUZOMXJNTjJ1YTJibnFBeWREU3FJYi9sbFBoYXRNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFBcXFFV3h5UUk3VlZjRCtadnA1U2RBNDlTNW84SGtzYW5mV1NBWVpJU3Jxd1RaRDlJS0ZyTndnTkhpUXB0Y2FpNDVpMG8yc0FUcjNtbGI0SFkvdklCSjlMYm1XWGJVbEthRGE0RlBGcWhBT1AxOEFIWS83N0p6QWpHWlNQN1VtaGdJeEV2ci9GOXFVRDROV045ME1zeGszcGs3TFhoWnl5dk9yaDBVOW5qb0FEaHhHb2hFQy85WDFiR3d2bWNnYmozNGtlZXZMUmNrU0E1a0dsOVd1N3BqRXZsbUs0M0s2Q1VwTkFNME1BWFBUby9salNReXZkTkN4QjNMRjV5OU9SWk0vakRmZjAyUVVvSmJYQVFqc1FTVzBKMWd5bUk2MWxKU1I3aUtSaU1TTHAzaHhnYmVxZ0dTR050Z1c3bHhqUXdJWGRMbTltUGU3QXBPSUNwRzZLV0E9PSJdLCJraWQiOiIyMnV3S09pMlU1RVhWMkhxOFZtR0JRU3NnUFRSRGRjMmRtUHdqSUtOdkcwIiwidHlwIjoidmMrc2Qtand0IiwiYWxnIjoiRWREU0EifQ.eyJnZW5kZXIiOlt7Imxhbmd1YWdlIjoiZW5nIiwidmFsdWUiOiJmZW1hbGUifSx7Imxhbmd1YWdlIjoiZnJhIiwidmFsdWUiOiJmZU3DomxlIn0seyJsYW5ndWFnZSI6ImFyYSIsInZhbHVlIjoi2LDZg9ixIn1dLCJ2Y3QiOiJTRF9KV1QiLCJwb3N0YWxDb2RlIjoiNDUwMDkiLCJpc3MiOiJodHRwczovL2luamljZXJ0aWZ5LW1vY2sucWEtaW5qaTEubW9zaXAubmV0IiwiZnVsbE5hbWUiOnsiX3NkIjpbImZBMTQtRDZjOHhTSHFueGFPajVtNUlZUDlLelExRG1TSXRkQVFIaW5BVHciXX0sImRhdGVPZkJpcnRoIjoiMTk5OS8xMC8yMSIsImlzc3VlciI6ImRpZDp3ZWI6bW9zaXAuZ2l0aHViLmlvOmluamktY29uZmlnOnFhLWluamkxOm1vY2siLCJWSUQiOjEyMzQ1NiwicHJvdmluY2UiOlt7Imxhbmd1YWdlIjoiZnJhIiwidmFsdWUiOiJ5dcSBbiAyIn0seyJsYW5ndWFnZSI6ImFyYSIsInZhbHVlIjoi2YrZjtmP2KfZhuqJm-KljSJ9LHsibGFuZ3VhZ2UiOiJlbmciLCJ2YWx1ZSI6Inl1YW4gd2VlIn1dLCJpc3N1YW5jZURhdGUiOiIyMDI1LTA5LTA4VDEzOjQ0OjQ0LjU5NVoiLCJwaG9uZSI6Iis5MTk0MjczNTc5MzQiLCJjbmYiOnsia2lkIjoiZGlkOmp3azpleUpyZEhraU9pSlBTMUFpTENKMWMyVWlPaUp6YVdjaUxDSmpjbllpT2lKRlpESTFOVEU1SWl3aWVDSTZJa1pqWlRoR0xURlpjelpFUWpOTVNIQTJRVzlxVW13M2NVeDJVMVJmUlZWdGFGQm5jRk41V1VSeFdqQWlmUT09In0sImlkIjoiZGlkOmp3azpleUpyZEhraU9pSlBTMUFpTENKMWMyVWlPaUp6YVdjaUxDSmpjbllpT2lKRlpESTFOVEU1SWl3aWVDSTZJa1pqWlRoR0xURlpjelpFUWpOTVNIQTJRVzlxVW13M2NVeDJVMVJmUlZWdGFGQm5jRk41V1VSeFdqQWlmUT09IiwiVUlOIjoiMTIzNDU2IiwicmVnaW9uIjpbeyJsYW5ndWFnZSI6ImZyYSIsInZhbHVlIjoieXXEgW4gMyJ9LHsibGFuZ3VhZ2UiOiJhcmEiLCJ2YWx1ZSI6IiTZhNmP2Ybar--Al-GGkSJ9LHsibGFuZ3VhZ2UiOiJlbmciLCJ2YWx1ZSI6Inl1YW4gd2VlIDMifV0sImVtYWlsIjoic2l3ZXIua21AZ21haWwuY29tIiwiZXhwaXJhdGlvbkRhdGUiOiIyMDI3LTA5LTA4VDEzOjQ0OjQ0LjU5NVoifQ.M-mFZVfWmyBCz-ML6yglTPMJhvVhlWZ2xqWlt7S1NJaqoXHPzTrZK6Sa1d-l223NKSivB6dTSwGumaeXhk4YCA~WyIyQW4wb25RVTJxWlVIOUwxa0VBWjBRIiwiZnVsbE5hbWUiLFt7Imxhbmd1YWdlIjoiZnJhIiwidmFsdWUiOiJBbGhlcmkgQm9iYnkifSx7Imxhbmd1YWdlIjoiYXJhIiwidmFsdWUiOiLYqtiq2q_ZhNiv2YPZhtiz2Y7YstmC2YfZkNmC2ZDZgdmEINiv2LPZitmK2LPZitmD2K_Zg9mG2YjapNmIIn0seyJsYW5ndWFnZSI6ImVuZyIsInZhbHVlIjoiQWxoZXJpIEJvYmJ5In1dXQ~"

    private val credentials = listOf(sdJwt2, sdJwt2)


    @BeforeTest
    fun setup() {

    }

    @AfterTest
    fun tearDown() {
        unmockkAll()
    }

    @Test
    fun `test end-to-end build with real SD-JWT credentials`() {
        val builder = UnsignedSdJwtVPTokenBuilder(
            clientId = clientId,
            nonce = nonce,
            sdJwtCredentials = credentials
        )

        val result = builder.build()

        assertNotNull(result)
        assertTrue(result.containsKey("unsignedVPToken"))
        assertTrue(result.containsKey("vpTokenSigningPayload"))

        val unsignedToken = result["unsignedVPToken"] as UnsignedSdJwtVPToken
        val vpPayload = result["vpTokenSigningPayload"] as Map<*, *>

        assertEquals(credentials.size, unsignedToken.uuidToUnsignedKBT.size)
        assertEquals(credentials.size, vpPayload.size)

        unsignedToken.uuidToUnsignedKBT.values.forEach { token ->
            val parts = token.split(".")
            assertEquals(3, parts.size)

            val decodedHeader = String(Base64.getUrlDecoder().decode(parts[0]))
            val decodedPayload = String(Base64.getUrlDecoder().decode(parts[1]))

            assertTrue(
                decodedHeader.contains("\"alg\":\"EdDSA\""),
                "Header missing alg=EdDSA: $decodedHeader"
            )
            assertTrue(
                decodedPayload.contains(nonce),
                "Nonce $nonce not in payload: $decodedPayload"
            )
        }

        unsignedToken.uuidToUnsignedKBT.keys.forEach { uuid ->
            val mappedCredential = vpPayload[uuid]
            assertNotNull(mappedCredential)
            assertTrue(credentials.contains(mappedCredential))
        }
    }

    //TODO: add one more test with single cred. add one more cred.
}

