package io.mosip.openID4VP.authorizationRequest.proofJwt.DidHandler

import DidHandler
import io.mosip.openID4VP.exception.JWTVerificationException
import org.junit.Assert.assertEquals
import org.junit.Assert.assertThrows
import org.junit.Test
import org.junit.jupiter.api.assertDoesNotThrow


class DidHandlerTest {
    @Test
    fun `should verify the valid JWT with public key in did successfully`() {
        val jwt =
            "eyJ0eXAiOiJvYXV0aC1hdXRoei1yZXErand0IiwiYWxnIjoiRWREU0EiLCJraWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyNrZXktMCJ9.eyJwcmVzZW50YXRpb25fZGVmaW5pdGlvbiI6IntcImlkXCI6XCJ2cCB0b2tlbiBleGFtcGxlXCIsXCJwdXJwb3NlXCI6XCJSZWx5aW5nIHBhcnR5IGlzIHJlcXVlc3RpbmcgeW91ciBkaWdpdGFsIElEIGZvciB0aGUgcHVycG9zZSBvZiBTZWxmLUF1dGhlbnRpY2F0aW9uXCIsXCJmb3JtYXRcIjp7XCJsZHBfdmNcIjp7XCJwcm9vZl90eXBlXCI6W1wiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwiaW5wdXRfZGVzY3JpcHRvcnNcIjpbe1wiaWRcIjpcImlkIGNhcmQgY3JlZGVudGlhbFwiLFwiZm9ybWF0XCI6e1wibGRwX3ZjXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDIwXCJdfX0sXCJjb25zdHJhaW50c1wiOntcImZpZWxkc1wiOlt7XCJwYXRoXCI6W1wiJC5jcmVkZW50aWFsU3ViamVjdC5lbWFpbFwiXSxcImZpbHRlclwiOntcInR5cGVcIjpcInN0cmluZ1wiLFwicGF0dGVyblwiOlwiQGdtYWlsLmNvbVwifX1dfX1dfSIsImNsaWVudF9tZXRhZGF0YSI6IntcImF1dGhvcml6YXRpb25fZW5jcnlwdGVkX3Jlc3BvbnNlX2FsZ1wiOlwiRUNESC1FU1wiLFwiYXV0aG9yaXphdGlvbl9lbmNyeXB0ZWRfcmVzcG9uc2VfZW5jXCI6XCJBMjU2R0NNXCIsXCJ2cF9mb3JtYXRzXCI6e1wibXNvX21kb2NcIjp7XCJhbGdcIjpbXCJFUzI1NlwiLFwiRWREU0FcIl19LFwibGRwX3ZwXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDE4XCIsXCJFZDI1NTE5U2lnbmF0dXJlMjAyMFwiLFwiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwicmVxdWlyZV9zaWduZWRfcmVxdWVzdF9vYmplY3RcIjp0cnVlfSIsInN0YXRlIjoiU2EycUdXZTY4VmJidGx2ZUxxbjFzZz09Iiwibm9uY2UiOiIvTEUzS0ZpaFhsM3hUNjhLeWJob3NBPT0iLCJjbGllbnRfaWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyIsImNsaWVudF9pZF9zY2hlbWUiOiJkaWQiLCJyZXNwb25zZV9tb2RlIjoiZGlyZWN0X3Bvc3QiLCJyZXNwb25zZV90eXBlIjoidnBfdG9rZW4iLCJyZXNwb25zZV91cmkiOiJodHRwczovLzQ2YjItNDUtMTEyLTY4LTE5MC5uZ3Jvay1mcmVlLmFwcC92ZXJpZmllci92cC1yZXNwb25zZSJ9.jIDQsTGaN-5J5tZiRbYbC7-8UFnL-UY3qCamc6DYX_nAzQ4cSJovsEbt2DgQzADECc2042xJ7iAbqfydv48DAA"
        val clientId = "did:web:adityankannan-tw.github.io:openid4vp:files"

        assertDoesNotThrow { DidHandler().verify(jwt, clientId) }
    }

    @Test
    fun `should throw exception when JWT signature verification fails`() {
        val jwtWithInvalidSignature =
            "eyJ0eXAiOiJvYXV0aC1hdXRoei1yZXErand0IiwiYWxnIjoiRWREU0EiLCJraWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyNrZXktMCJ9.eyJwcmVzZW50YXRpb25fZGVmaW5pdGlvbiI6IntcImlkXCI6XCJ2cCB0b2tlbiBleGFtcGxlXCIsXCJwdXJwb3NlXCI6XCJSZWx5aW5nIHBhcnR5IGlzIHJlcXVlc3RpbmcgeW91ciBkaWdpdGFsIElEIGZvciB0aGUgcHVycG9zZSBvZiBTZWxmLUF1dGhlbnRpY2F0aW9uXCIsXCJmb3JtYXRcIjp7XCJsZHBfdmNcIjp7XCJwcm9vZl90eXBlXCI6W1wiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwiaW5wdXRfZGVzY3JpcHRvcnNcIjpbe1wiaWRcIjpcImlkIGNhcmQgY3JlZGVudGlhbFwiLFwiZm9ybWF0XCI6e1wibGRwX3ZjXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDIwXCJdfX0sXCJjb25zdHJhaW50c1wiOntcImZpZWxkc1wiOlt7XCJwYXRoXCI6W1wiJC5jcmVkZW50aWFsU3ViamVjdC5lbWFpbFwiXSxcImZpbHRlclwiOntcInR5cGVcIjpcInN0cmluZ1wiLFwicGF0dGVyblwiOlwiQGdtYWlsLmNvbVwifX1dfX1dfSIsImNsaWVudF9tZXRhZGF0YSI6IntcImF1dGhvcml6YXRpb25fZW5jcnlwdGVkX3Jlc3BvbnNlX2FsZ1wiOlwiRUNESC1FU1wiLFwiYXV0aG9yaXphdGlvbl9lbmNyeXB0ZWRfcmVzcG9uc2VfZW5jXCI6XCJBMjU2R0NNXCIsXCJ2cF9mb3JtYXRzXCI6e1wibXNvX21kb2NcIjp7XCJhbGdcIjpbXCJFUzI1NlwiLFwiRWREU0FcIl19LFwibGRwX3ZwXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDE4XCIsXCJFZDI1NTE5U2lnbmF0dXJlMjAyMFwiLFwiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwicmVxdWlyZV9zaWduZWRfcmVxdWVzdF9vYmplY3RcIjp0cnVlfSIsInN0YXRlIjoiU2EycUdXZTY4VmJidGx2ZUxxbjFzZz09Iiwibm9uY2UiOiIvTEUzS0ZpaFhsM3hUNjhLeWJob3NBPT0iLCJjbGllbnRfaWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyIsImNsaWVudF9pZF9zY2hlbWUiOiJkaWQiLCJyZXNwb25zZV9tb2RlIjoiZGlyZWN0X3Bvc3QiLCJyZXNwb25zZV90eXBlIjoidnBfdG9rZW4iLCJyZXNwb25zZV91cmkiOiJodHRwczovLzQ2YjItNDUtMTEyLTY4LTE5MC5uZ3Jvay1mcmVlLmFwcC92ZXJpZmllci92cC1yZXNwb25zZSJ9.jIDQsTGaN-5J5tZiRbYbC7-8UFnL-UY3qCamc6DYX_nAzQ4cSJovsEbdv48DAA"
        val clientId = "did:web:adityankannan-tw.github.io:openid4vp:files"


        val exception: Exception = assertThrows(JWTVerificationException.InvalidSignature::class.java) {
            DidHandler().verify(jwtWithInvalidSignature, clientId)
        }

        assertEquals("JWT signature verification failed (className=DidHandler)",exception.message)
    }

    @Test
    fun `should thrown invalid jwt exception when JWT is invalid`() {
        val jwtWithoutSignature =
            "eyJ0eXAiOiJvYXV0aC1hdXRoei1yZXErand0IiwiYWxnIjoiRWREU0EiLCJraWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyNrZXktMCJ9.eyJwcmVzZW50YXRpb25fZGVmaW5pdGlvbiI6IntcImlkXCI6XCJ2cCB0b2tlbiBleGFtcGxlXCIsXCJwdXJwb3NlXCI6XCJSZWx5aW5nIHBhcnR5IGlzIHJlcXVlc3RpbmcgeW91ciBkaWdpdGFsIElEIGZvciB0aGUgcHVycG9zZSBvZiBTZWxmLUF1dGhlbnRpY2F0aW9uXCIsXCJmb3JtYXRcIjp7XCJsZHBfdmNcIjp7XCJwcm9vZl90eXBlXCI6W1wiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwiaW5wdXRfZGVzY3JpcHRvcnNcIjpbe1wiaWRcIjpcImlkIGNhcmQgY3JlZGVudGlhbFwiLFwiZm9ybWF0XCI6e1wibGRwX3ZjXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDIwXCJdfX0sXCJjb25zdHJhaW50c1wiOntcImZpZWxkc1wiOlt7XCJwYXRoXCI6W1wiJC5jcmVkZW50aWFsU3ViamVjdC5lbWFpbFwiXSxcImZpbHRlclwiOntcInR5cGVcIjpcInN0cmluZ1wiLFwicGF0dGVyblwiOlwiQGdtYWlsLmNvbVwifX1dfX1dfSIsImNsaWVudF9tZXRhZGF0YSI6IntcImF1dGhvcml6YXRpb25fZW5jcnlwdGVkX3Jlc3BvbnNlX2FsZ1wiOlwiRUNESC1FU1wiLFwiYXV0aG9yaXphdGlvbl9lbmNyeXB0ZWRfcmVzcG9uc2VfZW5jXCI6XCJBMjU2R0NNXCIsXCJ2cF9mb3JtYXRzXCI6e1wibXNvX21kb2NcIjp7XCJhbGdcIjpbXCJFUzI1NlwiLFwiRWREU0FcIl19LFwibGRwX3ZwXCI6e1wicHJvb2ZfdHlwZVwiOltcIkVkMjU1MTlTaWduYXR1cmUyMDE4XCIsXCJFZDI1NTE5U2lnbmF0dXJlMjAyMFwiLFwiUnNhU2lnbmF0dXJlMjAxOFwiXX19LFwicmVxdWlyZV9zaWduZWRfcmVxdWVzdF9vYmplY3RcIjp0cnVlfSIsInN0YXRlIjoiU2EycUdXZTY4VmJidGx2ZUxxbjFzZz09Iiwibm9uY2UiOiIvTEUzS0ZpaFhsM3hUNjhLeWJob3NBPT0iLCJjbGllbnRfaWQiOiJkaWQ6d2ViOmFkaXR5YW5rYW5uYW4tdHcuZ2l0aHViLmlvOm9wZW5pZDR2cDpmaWxlcyIsImNsaWVudF9pZF9zY2hlbWUiOiJkaWQiLCJyZXNwb25zZV9tb2RlIjoiZGlyZWN0X3Bvc3QiLCJyZXNwb25zZV90eXBlIjoidnBfdG9rZW4iLCJyZXNwb25zZV91cmkiOiJodHRwczovLzQ2YjItNDUtMTEyLTY4LTE5MC5uZ3Jvay1mcmVlLmFwcC92ZXJpZmllci92cC1yZXNwb25zZSJ9"
        val clientId = "did:web:adityankannan-tw.github.io:openid4vp:files"


        val exception: Exception = assertThrows(JWTVerificationException.InvalidJWT::class.java) {
            DidHandler().verify(jwtWithoutSignature, clientId)
        }

        assertEquals("Invalid JWT format",exception.message)
    }

    @Test
    fun `should throw Key ID not found exception when Key ID is not available in JWT header`() {
        val jwtWithoutKeyId = "eyJhbGciOiJFZERTQSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzAxMjAwMDAwfQ.GM8hTzv8-5xTxzGdHo5opFzU1hR2MnNL9jzCq17vn7FZPEZYIXyo6q6T9EPRLrw6cU_m-ziBoi3EXi0WW"
        val clientId = "did:web:adityankannan-tw.github.io:openid4vp:files"

        val exception: Exception = assertThrows(JWTVerificationException.KidExtractionFailed::class.java) {
            DidHandler().verify(jwtWithoutKeyId, clientId)
        }

        assertEquals("KidExtractionFailed: KID extraction from DID document failed (className=DidHandler)",exception.message)
    }

    @Test
    fun `should throw publicKey extraction failure exception when public key is not extractable`() {
        val jwtNonExtractablePublicKey = "eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpleGFtcGxlOjEyMzQ1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzAxMjAwMDAwfQ.qD9hT4YF7i0tN4oP6ZQvcxJcbzV3J-m2C6GlXnZDWUVF2WvuAOPLMyU7wxlBCTsgJzR8GSKjDO6l9GrLDBSFCg"
        val clientId = "did:web:adityankannan-tw.github.io:openid4vp:files"

        val exception: Exception = assertThrows(JWTVerificationException.PublicKeyExtractionFailed::class.java) {
            DidHandler().verify(jwtNonExtractablePublicKey, clientId)
        }

        assertEquals("PublicKeyExtractionFailed: Public key extraction failed (className=DidHandler)",exception.message)
    }
}